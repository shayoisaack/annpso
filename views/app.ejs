<!DOCTYPE html>
<html>

<head>
    <title>ANNPSO</title>
    <meta name='viewport' content='initial-scale=1' />
    <!-- 
	<link rel='stylesheet' href='main.css'/> -->
    <style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    html,
    body {
        background: white;
        color: rgba(0, 0, 0, 0.6);
        height: 100%;
    }

    .box {
        display: flex;
        flex-flow: column;
        height: 100%;
    }

    #main-box {
        flex: 1 1 auto;
    }

    #header {
        height: 50px;
        flex: 0 1 50px;
        background: white;
        border-bottom: 1px solid rgba(0, 0, 0, 0.2);
        display: block;
    }

    .header-item {
        line-height: 50px;
        color: rgba(0, 0, 0, 0.5);
        margin-left: 10px;
        font-weight: bold;
        cursor: pointer;
    }

    .selected {
        color: rgba(0, 0, 0, 0.8);
    }

    #main {
        float: left;
        width: 74%;
        height: 100%;
        flex: 1 1 auto;
        padding: 10px;
        box-sizing: border-box;
    }

    #controls {
        float: right;
        width: 26%;
        height: 100%;
        border-left: 1px solid rgba(0, 0, 0, 0.2);
        flex: 1 1 auto;
        box-sizing: border-box;
    }

    #myCanvas {
        border: 0.5px solid #ddd;
        margin: 10px;
    }

    table {
        border-collapse: collapse;
    }

    td {
        border: 1px solid #ddd;
        /*rgba(0,0,0,0.2);*/
        margin: 0;
        padding: 0;
    }

    .right {
        float: right;
        margin-right: 10px;
    }

    .section {
        min-height: 100px;
        border-bottom: 1px solid rgba(0, 0, 0, 0.2);
        padding: 10px;
    }

    .section-header {
        font-weight: bold;
        padding: 0px 0px 4px 0px;
        font: 1.3em;
        color: rgba(0, 0, 0, 0.8);
    }

    .button {
        padding: 10px;
        margin: 0 10px 4px 0px;
        background: green;
        color: white;
        display: inline-block;
        cursor: pointer;
    }

    #map,
    #other {
        width: 50%;
        float: left;
    }

    #other {
        /*background: blue;*/
        height: 200px;
        padding-left: 10px;
        /*width: 48%;*/
    }

    #choose-res {
        display: block;
        width: 50%;
        padding: 6px;
        margin-top: 10px;
        position: relative;
        top: 4px;
    }

    #colorbar {
        height: 20px;
        margin-bottom: 4px;
        background: linear-gradient(to right, green, red);
    }

    #labels {
        width: 100%;
    }

    .label {
        float: left;
        width: 33.3%;
    }

    .left {
        float: left;
    }

    #chart-box {
        width: 100%;
        height: 300px;
        background: rgba(0, 0, 0, 0.05);
        margin: 25px 0 10px 0;
        padding: 25px 5px 0 5px;
    }

    #other-info {
        width: 100%;
        height: 150px;
        background: rgba(0, 0, 0, 0.05);
        margin: 10px 0 10px 0;
        font-size: 0.9em;
        padding: 10px;
    }

    .row {
        width: 100%;
        margin-bottom: 8px;
    }

    .row-item {
        padding: 0 10px 0 0;
    }
    </style>
    <!-- 
    <script src='main.js'></script> -->
</head>

<body>
    <div id='header' class='box'>
        <span class='header-item'>Reservoir</span>
        <span class='header-item selected'>Simulate</span>
        <span class='header-item'>Solve</span>
        <span class='header-item right' style='color: rgba(0,0,0,0.8); cursor: none;'>Well Placement Using ANN</span>
    </div>
    <div id='main'>
        <div id='map'></div>
        <div id='other'>
            <div id='colorbar'></div>
            <div id='labels'>
                <div class='label'>0%</div>
                <div class='label' style='text-align: center;'>So</div>
                <div class='label' style='text-align: right;'>100%</div>
            </div>
            <div id='chart-box'>
                <canvas id='chart'></canvas>
            </div>
            <div id='other-info'>
                <div class='row'>Info</div>
                <div class='row'>
                    <div class='left row-item'>OOIP: <span>4,675.32 MMSTB</span></div>
                    <div class='left row-item'>Remaining: <span>- MMSTB</span></div>
                    <div class='left row-item'>Recovered: <span>- MMSTB</span></div>
                </div>
                <div class='row'>
                    <div class='left row-item'>Initial Pressure: <span>4500 psi</span></div>
                    <div class='left row-item'>Recovery Factor: <span>-</span></div>
                </div>
            </div>
        </div>
        <select id='choose-res'>
            <option value="volvo">Reservoir 1 (50 x 50)</option>
            <option value="saab">Saab</option>
            <option value="mercedes">Mercedes</option>
            <option value="audi">Audi</option>
        </select>
    </div>
    <div id='controls'>
        <div class='section'>
            <div class='section-header'>Wells</div>
            <div class='button'>Manually Place Well</div>
        </div>
        <div class='section'>
            <div class='section-header'>Simulate</div>
            <div class='button' id='simulate-simulator'>Use Simulator</div><span class='button-text' id='simulate-simulator-text'>32.035 s</span>
            <br/>
            <div class='button' id='simulate-ann'>Use ANN*</div><span class='button-text'>0.002 s</span>
            <br/>
            <div class='button' id='simulate-all'>Use All</div>
        </div>
        <div class='section'>
            <div class='section-header'>Solve</div>
            <div class='button'>Use Simulator</div><span class='button-text'>-</span>
            <br/>
            <div class='button'>Use ANN</div><span class='button-text'>5 s</span>
            <br/>
            <div class='button'>Use ANN-PSO*</div><span class='button-text'>0.45 s</span>
            <br/>
            <div class='button'>Use All</div>
        </div>
        <div style='padding: 10px; font-size: 0.8em;'>*The method proposed in this research. Note perfomance improvements compared to traditional approaches.</div>
    </div>
</body>
<script type="text/javascript" src="./jquery.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
//declare glboal objects
var socket = io();
var resObj = {};
var wellsObj = [];
</script>
<script>
function drawGrid(res, wells) {
    if (wells == undefined) wells = [];

    var gridblocksX = res.cell.length;
    var gridblocksY = res.cell[0].length;
    var gridSize = $('#main').width() / 2;
    $('#other').css('height', gridSize + 'px');
    var $grid = $('<table id="grid-table" style="border: 1px solid black; margin: 0; padding: 0; width: ' + gridSize + 'px; height: ' + gridSize * gridblocksX / gridblocksY + 'px"></table>');
    var cellSize = 1 / gridblocksY * 100;
    var counter = 0;
    for (var i = 0; i < gridblocksX; i++) {
        $row = $('<tr></tr>');
        for (var j = 0; j < gridblocksY; j++) {
            $td = $('<td></td>');
            $td.attr('id', counter);
            $td.attr('data-x', i);
            $td.attr('data-y', j);
            $td.css('width', cellSize + '%');
            $td.css('height', cellSize + '%');
            for (var wi = 0; wi < wells.length; wi++) {
                if (wells[wi].loc.x == i && wells[wi].loc.y == j) {
                    $td.css('background', '#000');
                } else {
                    $td.css('background', getColorForPercentage(res.cell[i][j].So));
                }
            }
            $row.append($td);
        }
        counter++;
        $grid.append($row);
    }
    $('#map').html($grid);
}

function drawWells(wells){
	
}
function calcOIP(res) {
    var OIP = 0;
    for (var i = 0; i < res.cell.length; i++) {
        for (var j = 0; j < res.cell[0].length; j++) {
            OIP += res.cell[i][j].dx * res.cell[i][j].dy * res.cell[i][j].dz * res.cell[i][j].poro * (1 - res.cell[i][j].Sw);
        }
    }
    return OIP / 5.614583;
}
//drawGrid(50);

var percentColors = [
    { pct: 0.0, color: { r: 0xff, g: 0x00, b: 0 } },
    { pct: 0.5, color: { r: 0xff, g: 0xff, b: 0 } },
    { pct: 1.0, color: { r: 0x00, g: 0xff, b: 0 } }
];

var getColorForPercentage = function(pct) {
    for (var i = 1; i < percentColors.length - 1; i++) {
        if (pct < percentColors[i].pct) {
            break;
        }
    }
    var lower = percentColors[i - 1];
    var upper = percentColors[i];
    var range = upper.pct - lower.pct;
    var rangePct = (pct - lower.pct) / range;
    var pctLower = 1 - rangePct;
    var pctUpper = rangePct;
    var color = {
        r: Math.floor(lower.color.r * pctLower + upper.color.r * pctUpper),
        g: Math.floor(lower.color.g * pctLower + upper.color.g * pctUpper),
        b: Math.floor(lower.color.b * pctLower + upper.color.b * pctUpper)
    };
    return 'rgb(' + [color.r, color.g, color.b].join(',') + ')';
    // or output as hex if preferred
}
</script>
<script>
socket.on('reservoir', function(res) {
    console.log(res);
    resObj = res;
    wellsObj = [{ loc: { x: 1, y: 3 }, p_bh: 3350 }, { loc: { x: 25, y: 25 }, p_bh: 3350 }, { loc: { x: 30, y: 25 }, p_bh: 3350 }];
    //res = modifyRes(res);
    drawGrid(res, wellsObj);
    console.log(calcOIP(res), 'bbl');
    $('td').on('click', function(e) {
        $(this).css('background', '#000');//getColorForPercentage($(this).data('x') / 50));
        var x = $(this).data('x');
        var y = $(this).data('y');
        console.log(x, y);
        // for (var count = 1; count < 10; count++) {
        //     for (var i = 0; i < res.cell.length; i++) {
        //         for (var j = 0; j < res.cell[0].length; j++) {
        //             if ((i == x + count && j < x + 10 && j > x - 10) || (j == y + count && i < x + 10 && i > x - 10)) {
        //                 var item = $('body').find('[data-x="' + i + '"][data-y="' + j + '"]');
        //                 item.css('background', getColorForPercentage(count / 10));
        //                 console.log(item);
        //             }
        //         }
        //     }

        // }
        //socket.emit('chat message', $(this).data('x'));
    })
});

function modifyRes(res) {
    res.cell[1][3].So = 0.4;
    res.cell[0][2].So = 0.5;
    res.cell[0][3].So = 0.5;
    res.cell[0][4].So = 0.55;
    res.cell[1][2].So = 0.5;
    res.cell[1][4].So = 0.5;
    res.cell[2][2].So = 0.5;
    res.cell[2][3].So = 0.5;
    res.cell[2][4].So = 0.5;
    res.cell[0][1].So = 0.55;
    res.cell[1][1].So = 0.55;
    res.cell[2][1].So = 0.55;
    res.cell[3][2].So = 0.6;
    res.cell[3][3].So = 0.55;
    res.cell[3][4].So = 0.55;
    res.cell[3][1].So = 0.6;
    return res;
}
socket.on('simulation-result', function(N_o) {
    console.log('N_o', N_o);
});
</script>
<script src='Chart.js'></script>
<script type="text/javascript"></script>
<script>
var ctx = document.getElementById("chart").getContext('2d');
var myChart = new Chart(ctx, {
    type: 'line',
    data: {
        labels: ["day 0", "day 10", "day 20", "day 30", "day 40", "day 50"],
        datasets: [{
            label: 'Cummulative Production (MSTB)',
            data: [0, 4, 10, 20, 28, 32],
            backgroundColor: [
                'rgba(255, 99, 132, 0.2)',
                'rgba(54, 162, 235, 0.2)',
                'rgba(255, 206, 86, 0.2)',
                'rgba(75, 192, 192, 0.2)',
                'rgba(153, 102, 255, 0.2)',
                'rgba(255, 159, 64, 0.2)'
            ],
            borderColor: [
                'rgba(255,99,132,1)',
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)',
                'rgba(75, 192, 192, 1)',
                'rgba(153, 102, 255, 1)',
                'rgba(255, 159, 64, 1)'
            ],
            borderWidth: 1
        }]
    },
    options: {
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero: true
                }
            }]
        }
    }
});
</script>
<script>
var startDate;
var endDate;
//handlers for the controls in UI
$('#simulate-simulator').on('click', function() {
    startDate = new Date();
    socket.emit('simulate-simulator', resObj, wellsObj);
});

//socket handlers for receiving from server
socket.on('simulate-simulator-final', function(obj) {
    endDate = new Date();
    var time = (endDate.getTime() - startDate.getTime()) / 1000;
    console.log('time taken: ', time, 's');
    $('#simulate-simulator-text').html(time + 's');
    drawGrid(obj.res);
    console.log('obj ', obj);
});
</script>

</html>